@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@{
    Layout = "SW_Master.cshtml";


    int pageSize = 10; // How many items per page
    int page; // The page we are viewing
    string searchTerm = Context.Request.QueryString["search"].ToLower();

    /* Set up parameters */

    if (!int.TryParse(Request.QueryString["page"], out page))
    {
        page = 1;
    }

    
    int totalNodes = 0;
    int totalPages = 0;

    IEnumerable<IPublishedContent> nodes = null;

    if (!String.IsNullOrEmpty(searchTerm))
    {
        var home = Model.Content.Ancestor();
        nodes = home.Descendants().Where(n => n.DocumentTypeAlias != "Datefolder" 
                                        && n.DocumentTypeAlias != "Slide"
                                        && n.DocumentTypeAlias != "Slideshow")
                                  .Where(x =>
                                       x.Name.ToLower().Contains(searchTerm) ||
                                       x.GetPropertyValue<string>("bodyText").ToLower().Contains(searchTerm));

        totalNodes = nodes.Count();
        totalPages = (int)Math.Ceiling((double)totalNodes / (double)pageSize);

        /* Bounds checking */

        if (page > totalPages)
        {
            page = totalPages;
        }
        else if (page < 1)
        {
            page = 1;
        }
    }
    
}
<div class="clearfix">
    <div class="navigation">
        @Html.Partial("LeftNavigation", @Model.Content)
        &nbsp;

    </div>

    <div style="float: left; width: 75%; padding-left: 30px;">
        @Html.Raw(Model.Content.GetPropertyValue<string>("bodyText"))

        @if (totalNodes == 0)
        {
            <p>No results match your search</p>
        }
        else
        {
            <ul id="newsList">
                @foreach (var item in nodes.Skip((page - 1) * pageSize).Take(pageSize))
                {
                    <li>
                        <h3>
                            <a href="@item.Url">
                                @item.Name
                            </a>
                        </h3>
                        
                        @{
                    string fieldName = "bodyText";
                    string searchHiglight = "";

                    if (item.HasProperty(fieldName))
                    {
                        string fieldValue = item.GetPropertyValue<string>(fieldName);

                        fieldValue = Umbraco.StripHtml(fieldValue).ToString();
                        searchHiglight = Umbraco.Truncate(fieldValue, 200).ToString();
                        
                        searchHiglight = System.Text.RegularExpressions.Regex.Replace(searchHiglight, searchTerm, "<span style='color:red;'>" + searchTerm + "</span>", System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                    }
                        }

                        <p>@Html.Raw(searchHiglight)</p>

                        
                    </li>
                }
            </ul>
        }

        @*@if (totalPages > 1)
        {

            <p id="pager">
                @for (int p = 1; p < totalPages + 1; p++)
                {
                    //string selected = (p == page) ? "selected" : String.Empty;
                    //<li class="@selected"><a href="?page=@p" title="Go to page @p of results">@p</a></li>
                    <a href="?search=@searchTerm&amp;page=@p" title="Go to page @p of results">@p</a>
                    if (p < totalPages)
                    {
                        <text>| </text>
                    }
                }
            </p>
        }*@
        <div>
            <ul class="pagination" style="display: table;margin: 20px auto;">
                @Html.Raw(page == 1 ? "<li><span>" + library.GetDictionaryItem("firstpage") + "</span></li>"
                    : "<li><a href='?search=@searchTerm&amp;page=1'>" + library.GetDictionaryItem("firstpage") + "</a></li>")
                @Html.Raw(page == 1 ? "<li><span>" + library.GetDictionaryItem("prepage") + "</span></li>"
                    : "<li><a href='?search=@searchTerm&amp;page=" + (page - 1) + "'>" + library.GetDictionaryItem("prepage") + "</a></li>")
                @for (int p = 1; p < totalPages + 1; p++)
                {
                    var selected = p == page ? " class=\"active\"" : "";
                    <li @Html.Raw(selected)><a href="?search=@searchTerm&amp;page=@p">@p</a></li>
                }
                @Html.Raw(page == totalPages ? "<li><span>" + library.GetDictionaryItem("nextpage") + "</span></li>"
                    : "<li><a href='?search=@searchTerm&amp;page=" + (page + 1) + "'>" + library.GetDictionaryItem("nextpage") + "</a></li>")
                @Html.Raw(page == totalPages ? "<li><span>" + library.GetDictionaryItem("lastpage") + "</span></li>"
                    : "<li><a href='?search=@searchTerm&amp;page=" + totalPages + "'>" + library.GetDictionaryItem("lastpage") + "</a></li>")
            </ul>
        </div>

    </div>


</div>

